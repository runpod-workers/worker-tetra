name: CI/CD

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  REGISTRY: docker.io
  IMAGE_NAME: runpod/tetra-rp

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Setup dependencies
        run: make setup

      - name: Run unit tests
        run: make test-unit

      - name: Run integration tests
        run: make test-integration

      - name: Run all tests with coverage
        run: make test-coverage

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Set up uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Check code formatting with ruff
        run: make format-check

      - name: Check code style with ruff
        run: make lint

  local-execution-test:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Set up uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Setup dependencies
        run: make setup

      - name: Test local handler execution
        run: |
          timeout 30s make test-handler || exit_code=$?
          if [ ${exit_code:-0} -eq 124 ]; then
            echo "Handler testing timed out"
            exit 1
          else
            exit ${exit_code:-0}
          fi

  release:
    runs-on: ubuntu-latest
    needs: [test, lint, local-execution-test]
    if: github.ref == 'refs/heads/main'
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: googleapis/release-please-action@v3
        id: release
        with:
          release-type: python
          token: ${{ secrets.GITHUB_TOKEN }}

  docker-pr:
    runs-on: ubuntu-latest
    needs: [test, lint, local-execution-test]
    if: github.event_name == 'pull_request'
    steps:
      - name: Clear Space
        run: |
          rm -rf /usr/share/dotnet
          rm -rf /opt/ghc
          rm -rf "/usr/local/share/boost"
          rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Setup dependencies
        run: |
          uv sync
          git submodule update --remote --merge
          cp tetra-rp/src/tetra_rp/protos/remote_execution.py src/

      - name: Build and push GPU Docker image (PR)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push CPU Docker image (PR)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile-cpu
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cpu:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  docker-main:
    runs-on: ubuntu-latest
    needs: [test, lint, local-execution-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Clear Space
        run: |
          rm -rf /usr/share/dotnet
          rm -rf /opt/ghc
          rm -rf "/usr/local/share/boost"
          rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Setup dependencies
        run: |
          uv sync
          git submodule update --remote --merge
          cp tetra-rp/src/tetra_rp/protos/remote_execution.py src/

      - name: Build and push GPU Docker image (main)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push CPU Docker image (main)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile-cpu
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cpu:main
          cache-from: type=gha
          cache-to: type=gha,mode=max

  cleanup-pr-docker:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    steps:
      - name: Install crane
        run: |
          curl -sL https://github.com/google/go-containerregistry/releases/latest/download/go-containerregistry_Linux_x86_64.tar.gz | tar -xzv crane
          chmod +x crane

      - name: Delete PR Docker images
        run: |
          echo ${{ secrets.DOCKERHUB_TOKEN }} | ./crane auth login docker.io --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          ./crane delete docker.io/runpod/tetra-rp:pr-${{ github.event.pull_request.number }} || echo "GPU image not found or already deleted"
          ./crane delete docker.io/runpod/tetra-rp-cpu:pr-${{ github.event.pull_request.number }} || echo "CPU image not found or already deleted"

  docker-prod:
    runs-on: ubuntu-latest
    needs: [release]
    if: needs.release.outputs.release_created || (github.ref == 'refs/heads/main' && needs.release.outputs.tag_name)
    steps:
      - name: Clear Space
        run: |
          rm -rf /usr/share/dotnet
          rm -rf /opt/ghc
          rm -rf "/usr/local/share/boost"
          rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract GPU metadata
        id: meta-gpu
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract CPU metadata
        id: meta-cpu
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cpu
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Setup dependencies
        run: |
          uv sync
          git submodule update --remote --merge
          cp tetra-rp/src/tetra_rp/protos/remote_execution.py src/

      - name: Build and push GPU Docker image (prod)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta-gpu.outputs.tags }}
          labels: ${{ steps.meta-gpu.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push CPU Docker image (prod)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile-cpu
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta-cpu.outputs.tags }}
          labels: ${{ steps.meta-cpu.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max