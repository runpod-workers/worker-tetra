{
  "input": {
    "function_name": "test_mixed_dependencies",
    "function_code": "def test_mixed_dependencies():\n    import subprocess\n    import json\n    import os\n    \n    # Test that both system and Python dependencies are available\n    results = {\n        'system_dependencies': {},\n        'python_dependencies': {},\n        'environment_info': {}\n    }\n    \n    # Test system dependency (wget)\n    try:\n        wget_result = subprocess.run(['wget', '--version'], \n                                   capture_output=True, text=True, timeout=10)\n        results['system_dependencies']['wget'] = {\n            'available': wget_result.returncode == 0,\n            'version': wget_result.stdout.split('\\n')[0] if wget_result.returncode == 0 else None,\n            'error': wget_result.stderr if wget_result.returncode != 0 else None\n        }\n    except Exception as e:\n        results['system_dependencies']['wget'] = {\n            'available': False,\n            'error': str(e)\n        }\n    \n    # Test Python dependencies\n    try:\n        import requests\n        results['python_dependencies']['requests'] = {\n            'available': True,\n            'version': requests.__version__,\n            'location': requests.__file__\n        }\n    except ImportError as e:\n        results['python_dependencies']['requests'] = {\n            'available': False,\n            'error': str(e)\n        }\n    \n    try:\n        import numpy\n        results['python_dependencies']['numpy'] = {\n            'available': True,\n            'version': numpy.__version__,\n            'location': numpy.__file__\n        }\n        # Test numpy functionality\n        arr = numpy.array([1, 2, 3, 4, 5])\n        results['python_dependencies']['numpy']['test_result'] = {\n            'array_sum': int(arr.sum()),\n            'array_mean': float(arr.mean())\n        }\n    except ImportError as e:\n        results['python_dependencies']['numpy'] = {\n            'available': False,\n            'error': str(e)\n        }\n    \n    # Environment info\n    results['environment_info'] = {\n        'running_as_root': os.getuid() == 0 if hasattr(os, 'getuid') else False,\n        'virtual_env': os.environ.get('VIRTUAL_ENV'),\n        'python_path': os.environ.get('PYTHONPATH')\n    }\n    \n    return results\n",
    "dependencies": ["requests", "numpy"],
    "system_dependencies": ["wget"],
    "args": [],
    "kwargs": {}
  }
}