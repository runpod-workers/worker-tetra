{
  "input": {
    "function_code": "import subprocess\nimport os\nimport sys\ndef debug_subprocess_environment():\n    \"\"\"Debug subprocess environment to understand vLLM issue.\"\"\"\n    results = []\n    \n    # Check symlink status\n    app_venv_path = '/app/.venv'\n    if os.path.exists(app_venv_path):\n        if os.path.islink(app_venv_path):\n            target = os.readlink(app_venv_path)\n            results.append(f'✓ Symlink exists: {app_venv_path} -> {target}')\n        else:\n            results.append(f'✗ {app_venv_path} is not a symlink')\n    else:\n        results.append(f'✗ {app_venv_path} does not exist')\n    \n    # Check if target venv has vllm\n    try:\n        if os.path.islink(app_venv_path):\n            target = os.readlink(app_venv_path)\n            vllm_path = f'{target}/lib/python*/site-packages/vllm'\n            import glob\n            vllm_dirs = glob.glob(vllm_path)\n            if vllm_dirs:\n                results.append(f'✓ vLLM found in target venv: {vllm_dirs[0]}')\n            else:\n                results.append(f'✗ vLLM not found in target venv (searched: {vllm_path})')\n    except Exception as e:\n        results.append(f'Error checking vLLM in target: {e}')\n    \n    # Test subprocess execution with explicit environment\n    results.append('')\n    results.append('=== Subprocess Tests ===')\n    \n    # Test 1: Direct python version from symlink\n    try:\n        result = subprocess.run(\n            ['/app/.venv/bin/python3', '--version'],\n            capture_output=True, text=True, timeout=10\n        )\n        if result.returncode == 0:\n            results.append(f'✓ Python version from symlink: {result.stdout.strip()}')\n        else:\n            results.append(f'✗ Python failed: {result.stderr.strip()}')\n    except Exception as e:\n        results.append(f'✗ Python subprocess error: {e}')\n    \n    # Test 2: Check if vllm module is accessible\n    try:\n        result = subprocess.run(\n            ['/app/.venv/bin/python3', '-c', 'import vllm; print(\"vLLM import successful\")'],\n            capture_output=True, text=True, timeout=10\n        )\n        if result.returncode == 0:\n            results.append(f'✓ vLLM import from subprocess: {result.stdout.strip()}')\n        else:\n            results.append(f'✗ vLLM import failed: {result.stderr.strip()}')\n    except Exception as e:\n        results.append(f'✗ vLLM import subprocess error: {e}')\n    \n    # Test 3: Check Python path in subprocess\n    try:\n        result = subprocess.run(\n            ['/app/.venv/bin/python3', '-c', 'import sys; print(\"PYTHONPATH:\", sys.path[:3])'],\n            capture_output=True, text=True, timeout=10\n        )\n        if result.returncode == 0:\n            results.append(f'✓ Subprocess Python path: {result.stdout.strip()}')\n        else:\n            results.append(f'✗ Python path check failed: {result.stderr.strip()}')\n    except Exception as e:\n        results.append(f'✗ Python path subprocess error: {e}')\n    \n    # Test 4: Current process environment\n    results.append('')\n    results.append('=== Current Process Environment ===')\n    results.append(f'VIRTUAL_ENV: {os.environ.get(\"VIRTUAL_ENV\", \"Not set\")}')\n    results.append(f'PATH: {os.environ.get(\"PATH\", \"Not set\")[:200]}...')\n    results.append(f'Current Python path: {sys.executable}')\n    \n    return '\\n'.join(results)",
    "function_name": "debug_subprocess_environment",
    "args": [],
    "kwargs": {},
    "dependencies": ["vllm"]
  }
}
