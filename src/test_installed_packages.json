{
  "input": {
    "function_name": "test_installed_packages",
    "function_code": "def test_installed_packages():\n    import subprocess\n    import sys\n    print(f\"Python executable: {sys.executable}\")\n    print(f\"Python version: {sys.version}\")\n    \n    # Try to list packages with different methods\n    methods = []\n    \n    # Method 1: uv pip list\n    try:\n        result = subprocess.run(['uv', 'pip', 'list', '--system'], \n                              capture_output=True, text=True, timeout=30)\n        methods.append({\n            'method': 'uv pip list --system',\n            'returncode': result.returncode,\n            'stdout': result.stdout[:500],  # Limit output\n            'stderr': result.stderr[:200]\n        })\n    except Exception as e:\n        methods.append({'method': 'uv pip list --system', 'error': str(e)})\n    \n    # Method 2: pip list\n    try:\n        result = subprocess.run(['pip', 'list'], \n                              capture_output=True, text=True, timeout=30)\n        methods.append({\n            'method': 'pip list', \n            'returncode': result.returncode,\n            'stdout': result.stdout[:500],\n            'stderr': result.stderr[:200]\n        })\n    except Exception as e:\n        methods.append({'method': 'pip list', 'error': str(e)})\n    \n    # Method 3: Check specific packages\n    package_checks = []\n    for pkg in ['runpod', 'cloudpickle', 'pydantic', 'requests']:\n        try:\n            __import__(pkg)\n            package_checks.append({'package': pkg, 'status': 'importable'})\n        except ImportError as e:\n            package_checks.append({'package': pkg, 'status': 'not_importable', 'error': str(e)})\n    \n    return {\n        'methods': methods,\n        'package_checks': package_checks,\n        'python_path': sys.path\n    }\n",
    "args": [],
    "kwargs": {}
  }
}
